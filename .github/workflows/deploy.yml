name: Deploy on Tag

on:
  push:
    tags:
      - 'v*'  # Tags wie v1.0.0, v1.0.1 etc.

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      # 1️⃣ Repository auschecken
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2️⃣ Private Key aus Secret auf Runner speichern
      - name: Add private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      # 3️⃣ Server Hostkey hinzufügen
      - name: Add server to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # 4️⃣ Test SSH-Verbindung
      - name: Debug SSH Connection
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo ✅ SSH Verbindung erfolgreich"

      # 5️⃣ Dateien auf Server kopieren
      - name: Copy Project to Server
        run: |
          rsync -av --exclude 'node_modules' --exclude 'logs' \
            -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes" \
            ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USER }}/app/

      # 6️⃣ Deployment via Docker Compose
      - name: Deploy with Docker Compose
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /home/${{ secrets.SERVER_USER }}/app
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --build --remove-orphans
            docker image prune -f
          EOF
