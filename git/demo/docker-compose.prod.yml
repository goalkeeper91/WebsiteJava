services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./.env
    environment:
      - logging.level.root=TRACE
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    env_file:
      - ./.env
    networks:
      - app-network

  postgres:
    image: postgres:15
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -q"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  proxy:
    image: nginx:stable-alpine
    container_name: nginx_proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/nginx/certs
      - ./certbot-www:/var/www/certbot
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_started
    networks:
      - app-network

  db-admin:
    image: adminer:4.8.1-standalone
    restart: always
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  certbot-renew:
    image: certbot/certbot
    container_name: certbot_renewer
    volumes:
      - ./certs:/etc/letsencrypt
      - ./certbot-www:/var/www/certbot
    entrypoint: sh -c "trap exit TERM; while :; do certbot renew --quiet --webroot -w /var/www/certbot; sleep 86400; done"
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
