version: "3.9"

services:
  backend:
    build:
      # Gib den Kontext explizit an, um den Fehler zu vermeiden
      context: ./backend
      # Gib dann den Pfad zum Dockerfile relativ zu diesem Kontext an.
      dockerfile: Dockerfile
    # Stellt sicher, dass das Backend erst startet, wenn die Datenbank bereit ist
    depends_on:
      postgres:
        condition: service_healthy
    # Lade die Umgebungsvariablen aus der .env-Datei im Backend-Ordner
    env_file:
      - ./backend/.env
    # Fügen Sie hier Ihre Anwendungsumgebungsvariablen ein, falls Sie welche benötigen
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      # Aktiviert den TRACE-Loglevel für die maximale Anzahl an Details
      - logging.level.root=TRACE
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:8080/actuator/health"]
      interval: 10s
      timeout: 15s
      retries: 10
      start_period: 120s
    networks:
      - app-network

  frontend:
    build:
      # Ändere den Kontext, um auf das übergeordnete Projektverzeichnis zu zeigen.
      context: .
      dockerfile: ./frontend/Dockerfile
    env_file:
      - ./frontend/.env
    networks:
      - app-network

  postgres:
    image: postgres:15
    env_file:
      - ./postgres/.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -q"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  proxy:
    image: nginx:stable-alpine
    container_name: nginx_proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/nginx/certs
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
